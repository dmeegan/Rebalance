{"version":3,"sources":["components/Stock.js","components/Portfolio.js","components/AddStock.js","App.js","serviceWorker.js","index.js"],"names":["Stock","this","props","stock","id","symbol","name","currentPrice","quantity","marketValue","currentPercentage","targetPercentage","targetValue","addedValue","sellOrPurchase","costOrValue","Button","variant","type","className","onClick","delStock","bind","FormControl","min","value","onChange","getQuantity","max","step","handleTargetPercentageInput","Component","Portfolio","portfolio","length","Table","striped","bordered","hover","scope","map","key","totalAssets","calculateMarketValue","calculateTotalAssets","calculateCurrentPercentage","calculateTargetValue","calculateSellOrPurchase","AddStock","state","userSymbolInput","handleUserInput","e","setState","target","handleSubmit","preventDefault","addStock","replace","Form","onSubmit","InputGroup","Prepend","placeholder","required","App","newPortfolioItem","newId","Search_API_Call","fetch","then","searchResponse","json","searchData","stockToAdd","Quote_API_Call","quoteResponse","quoteData","toFixed","catch","alert","currentTotalAssets","find","filter","userQuantityInput","Math","floor","userPercentageInput","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.2b302131.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {Button, FormControl} from 'react-bootstrap';\r\n\r\nclass Stock extends Component {\r\n   \r\n\r\n    render() {\r\n      \r\n    const {id, symbol, name, currentPrice, quantity, marketValue, currentPercentage, targetPercentage, targetValue, addedValue, sellOrPurchase, costOrValue} = this.props.stock;\r\n        return (\r\n            <tr>\r\n                <td>\r\n                    <Button variant=\"primary\" type=\"button\" className=\"removeStockButton\" onClick={this.props.delStock.bind(this, id)}>Remove</Button>\r\n                </td>\r\n                <td>\r\n                    {symbol}\r\n                </td>\r\n                <td>\r\n                    {name}\r\n                </td>\r\n                <td>\r\n                    <FormControl type=\"number\" min=\"0\" className=\"table input\" value={quantity} onChange={this.props.getQuantity.bind(this, id)}/>\r\n                </td>\r\n                <td>\r\n                    {currentPrice}\r\n                </td>\r\n                <td>\r\n                    {marketValue}\r\n                </td>\r\n                <td>\r\n                    {currentPercentage}\r\n                </td>\r\n                <td>\r\n                    <FormControl type=\"number\" min=\"0\" max=\"100\" className=\"input\" step=\"0.01\" id=\"targetPercentageInput\" value={targetPercentage} onChange={this.props.handleTargetPercentageInput.bind(this, id)}/>\r\n                </td>\r\n                <td>\r\n                    {targetValue}\r\n                </td>\r\n                <td>\r\n                    {addedValue}\r\n                </td>\r\n                <td>\r\n                    {sellOrPurchase}\r\n                </td>\r\n                <td>\r\n                    {costOrValue}\r\n                </td>\r\n            </tr>\r\n        )\r\n    }\r\n}\r\n\r\nStock.propTypes = {\r\n    stock: PropTypes.object.isRequired\r\n}\r\n\r\nexport default Stock;\r\n","import React, { Component } from 'react';\r\nimport Stock from './Stock';\r\nimport PropTypes from 'prop-types';\r\nimport { Table } from 'react-bootstrap';\r\n\r\n\r\nclass Portfolio extends Component {\r\n\r\n    render() {\r\n        if (this.props.portfolio.length > 0) {\r\n        return (\r\n            <div>\r\n            <Table striped bordered hover variant=\"dark\">\r\n                         <thead><tr><th scope=\"col\"></th><th scope=\"col\">Symbol</th><th scope=\"col\">Stock Name</th><th scope=\"col\">Quantity</th><th scope=\"col\">Current Price</th><th scope=\"col\">Market Value</th><th scope=\"col\">Current Percentage</th><th scope=\"col\">Target Percentage</th><th scope=\"col\">Target Value</th><th scope=\"col\">Added Value</th><th scope=\"col\">Sell or Purchase</th><th scope=\"col\">Cost or Value</th></tr></thead>\r\n            <tbody>\r\n                {\r\n                this.props.portfolio.map((stock) => (\r\n                <Stock\r\n                    key={stock.id}\r\n                    getQuantity={this.props.getQuantity}\r\n                    delStock={this.props.delStock}\r\n                    totalAssets={this.props.totalAssets}\r\n                    stock={stock}\r\n                    calculateMarketValue={this.props.calculateMarketValue}\r\n                    calculateTotalAssets={this.props.calculateTotalAssets}\r\n                    calculateCurrentPercentage={this.props.calculateCurrentPercentage}\r\n                    handleTargetPercentageInput={this.props.handleTargetPercentageInput}\r\n                    calculateTargetValue={this.props.calculateTargetValue}\r\n                    calculateSellOrPurchase={this.props.calculateSellOrPurchase}\r\n                />\r\n            )) }\r\n            </tbody> \r\n            <tfoot><tr><th>Total</th><td></td><td></td><td></td><td></td><td>{this.props.totalAssets}</td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tfoot>\r\n            </Table>\r\n            </div>\r\n        )\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n}\r\n\r\nPortfolio.propTypes = {\r\n    portfolio: PropTypes.array.isRequired\r\n}\r\n\r\nexport default Portfolio;\r\n","import React, { Component } from 'react';\r\nimport { Button, InputGroup, Form, FormControl } from 'react-bootstrap';\r\n\r\nclass AddStock extends Component {\r\n    state = {\r\n        userSymbolInput: '',\r\n    }\r\n\r\n\r\n    handleUserInput = (e) => {\r\n        this.setState({\r\n            userSymbolInput: e.target.value\r\n        });\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.addStock(this.state.userSymbolInput.replace(\" \", \"\"));\r\n        this.setState({ userSymbolInput: '' })\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <Form className=\"addStockForm\" onSubmit={this.handleSubmit}>\r\n            <InputGroup>\r\n                <InputGroup.Prepend>\r\n                    <Button variant=\"outline-secondary\" type=\"submit\">Add Stock</Button>\r\n                </InputGroup.Prepend>\r\n                <FormControl placeholder=\"AMZN...\" required onSubmit={this.handleSubmit} type=\"text\" value={this.state.userSymbolInput} onChange={this.handleUserInput}/>\r\n            </InputGroup>\r\n            </Form>\r\n        )\r\n    };\r\n}\r\n\r\nexport default AddStock;","import React from 'react';\nimport Portfolio from './components/Portfolio';\nimport AddStock from './components/AddStock';\n// import AcceptUserStockSymbol from './acceptUserStockSymbol.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n// import FetchStockSymbol from './fetchStockSymbol.js';\n\n\nclass App extends React.Component {\n  state = {\n    totalAssets: '',\n    portfolio: [\n      //   {\n      //   id: '1',\n      //   symbol: \"MSFT\",\n      //   currentPrice: '153',\n      //   quantity: '',\n      //   marketValue: '',\n      //   currentPercentage: '',\n      //   targetPercentage: '',\n      //   targetValue: '',\n      //   addedValue: '',\n      //   sellOrPurchase: '',\n      //   costOrValue: '',\n      // },\n    ]\n  }\n\n  addStock = (userSymbolInput) => {\n    let newPortfolioItem = {};\n    let stockToAdd = '';\n    let currentPrice = '';\n    let stockTitle = '';\n    let newId = this.state.portfolio.length + 1\n    let API_Key = 'WTIDRPP8PEFL74TS';\n    let Search_API_Call = `https://www.alphavantage.co/query?function=SYMBOL_SEARCH&keywords=${userSymbolInput}&apikey=${API_Key}`;\n\n\n    fetch(Search_API_Call)\n      .then(\n        (searchResponse) => {\n          return searchResponse.json();\n        }\n      )\n      .then(\n        (searchData) => {\n          return stockToAdd = searchData[\"bestMatches\"][0];\n        }\n      )\n      .then(\n        (stockToAdd) => {\n          let Quote_API_Call = `https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=${stockToAdd[\"1. symbol\"]}&interval=5min&apikey=${API_Key}&outputsize=compact`;\n\n          fetch(Quote_API_Call)\n            .then(\n              (quoteResponse) => {\n                return quoteResponse.json();\n              }\n            )\n            .then(\n              (quoteData) => {\n                return currentPrice = +(quoteData[\"Global Quote\"][\"05. price\"]);\n              })\n            .then(\n              (currentPrice) => {\n                newPortfolioItem = {\n                  id: newId,\n                  symbol: stockToAdd[\"1. symbol\"],\n                  name: stockToAdd[\"2. name\"],\n                  currentPrice: currentPrice.toFixed(2),\n                  quantity: '',\n                  marketValue: '',\n                  currentPercentage: '',\n                  targetPercentage: '',\n                  targetValue: '',\n                  addedValue: '',\n                  sellOrPurchase: '',\n                  costOrValue: '',\n                };\n                this.setState({ portfolio: [...this.state.portfolio, newPortfolioItem] });\n              }\n            ).catch ( \n              () => alert(\"Error: Either your search term was invalid, or the request to add a stock was too frequent. Please try again.\")\n            )\n        }\n      )\n      .catch ( \n        () => alert(\"Error: Either your search term was invalid, or the request to add a stock was too frequent. Please try again.\")\n      )\n  }\n\n  delStock = (id) => {\n    let currentTotalAssets = 0;\n    this.setState({\n      totalAssets: this.state.totalAssets - this.state.portfolio.find(portfolio => portfolio.id === id).marketValue,\n      portfolio: [...this.state.portfolio.filter(portfolio => portfolio.id !== id)].map(stock => {\n        if (stock.id !== id) {\n          currentTotalAssets += stock.marketValue;\n          stock[\"currentPercentage\"] = (100 * (stock.marketValue / currentTotalAssets)).toFixed(2);\n        }\n        return stock;\n      })\n    }\n    )\n  }\n\n  // totalAssets: this.state.totalAssets - this.state.portfolio[this.state.portfolio.indexOf(id)].marketValue,\n\n  getQuantity = (id, e) => {\n    let currentTotalAssets = 0;\n    let userQuantityInput = +e.target.value;\n    if (userQuantityInput < 0) {\n      userQuantityInput = 0;\n    }\n    this.setState({ totalAssets: '' });\n    this.setState({\n      portfolio: this.state.portfolio.map(stock => {\n        if (stock.id === id) {\n          stock[\"quantity\"] = +userQuantityInput;\n          stock[\"marketValue\"] = ((stock.quantity) * (stock.currentPrice)).toFixed(2)\n          stock[\"targetValue\"] = ((stock.targetPercentage / 100) * (this.state.totalAssets)).toFixed(2);\n          stock[\"addedValue\"] = +(stock.targetValue - stock.marketValue).toFixed(2);\n          stock[\"sellOrPurchase\"] = Math.floor((stock.targetValue - stock.marketValue) / (+stock.currentPrice));\n          stock[\"costOrValue\"] = (-1* stock.sellOrPurchase * stock.currentPrice).toFixed(2);\n        };\n        currentTotalAssets += +stock.marketValue;\n        this.state.portfolio.map(stock => {\n          stock[\"currentPercentage\"] = +(100 * (+stock.marketValue / currentTotalAssets)).toFixed(2) || 0;\n          stock[\"targetValue\"] = ((stock.targetPercentage / 100) * (this.state.totalAssets)).toFixed(2);\n          stock[\"addedValue\"] = +(stock.targetValue - stock.marketValue).toFixed(2);\n          stock[\"sellOrPurchase\"] = Math.floor((stock.targetValue - stock.marketValue) / (+stock.currentPrice));\n          stock[\"costOrValue\"] = (-1* stock.sellOrPurchase * stock.currentPrice).toFixed(2);\n        })\n        return stock;\n      }),\n      totalAssets: currentTotalAssets.toFixed(2),\n    })\n  }\n\n  handleTargetPercentageInput = (id, e) => {\n    let userPercentageInput = +(e.target.value);\n    if (userPercentageInput > 100) {\n      userPercentageInput = 100\n    } else if (userPercentageInput < 0) {\n      userPercentageInput = 0\n    }\n    this.setState({\n      portfolio: this.state.portfolio.map(stock => {\n        if (stock.id === id) {\n          stock[\"targetPercentage\"] = userPercentageInput;\n          stock[\"targetValue\"] = ((stock.targetPercentage / 100) * (this.state.totalAssets)).toFixed(2);\n          stock[\"addedValue\"] = +(stock.targetValue - stock.marketValue).toFixed(2);\n          stock[\"sellOrPurchase\"] = Math.floor((stock.targetValue - stock.marketValue) / (+stock.currentPrice));\n          stock[\"costOrValue\"] = (-1* stock.sellOrPurchase * stock.currentPrice).toFixed(2);\n        };\n        return stock;\n      })\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <AddStock addStock={this.addStock} />\n        <Portfolio\n          getQuantity={this.getQuantity}\n          delStock={this.delStock}\n          totalAssets={this.state.totalAssets}\n          portfolio={this.state.portfolio}\n          calculateMarketValue={this.calculateMarketValue}\n          calculateTotalAssets={this.calculateTotalAssets}\n          calculateCurrentPercentage={this.calculateCurrentPercentage}\n          handleTargetPercentageInput={this.handleTargetPercentageInput}\n          calculateTargetValue={this.calculateTargetValue}\n          calculateSellOrPurchase={this.calculateSellOrPurchase}\n        />\n      </div>\n\n      /* <div className=\"rebalance table container\">\n                      <table className=\"table\">\n                          <thead>\n                              <tr>\n                                  <th>\n                                      Symbol\n                  </th>\n                                  <th>\n                                      Quantity\n                  </th>\n                                  <th>\n                                      Current Price\n                  </th>\n                                  <th>\n                                      Market Value\n                  </th>\n                                  <th>\n                                      Current Percentage\n                  </th>\n                                  <th>\n                                      Target Percentage\n                  </th>\n                                  <th>\n                                      Target Value\n                  </th>\n                                  <th>\n                                      Added Value\n                  </th>\n                                  <th>\n                                      Sell or Purchase\n                  </th>\n                                  <th>\n                                      Cost or Value\n                  </th>\n                              </tr>\n                          </thead>\n                          <tbody>\n                              <tr>\n                                  <td>\n                                      <output className=\"table output\" id=\"symbolOutput\" value={this.props.portfolio.stock.bind(\n                                          this, id)}/>\n                                  </td>\n                                  <td>\n                                      <input type=\"number\" min=\"0\" className=\"table input\" id=\"quantityInput\" />\n                                  </td>\n                                  <td>\n                                      <output className=\"table output\" id=\"currentPriceOutput\" />\n                                  </td>\n                                  <td>\n                                      <output className=\"table output\" id=\"currentPercentageOutput\" />\n                                  </td>\n                                  <td>\n                                      <input type=\"number\" min=\"0\" max=\"100\" className=\"table input\" id=\"targetPercentageInput\" />\n                                  </td>\n                                  <td>\n                                      <output className=\"table output\" id=\"targetValueOutput\" />\n                                  </td>\n                                  <td>\n                                      <output className=\"table output\" id=\"addedValueOutput\" />\n                                  </td>\n                                  <td>\n                                      <output className=\"table output\" id=\"sellOrPurchaseOutput\" />\n                                  </td>\n                                  <td>\n                                      <output className=\"table output\" id=\"costOrValueOutput\" />\n                                  </td>\n                              </tr>\n                          </tbody>\n                      </table>\n                  </div> */\n      //   <div className=\"Totals Table container\">\n      //     <table className=\"table\">\n      //       <tbody>\n      //         <tr>\n      //           <th>\n      //             Current Total\n      //           </th>\n      //           <td>\n      //             <output className=\"table output\" id=\"currentTotalOutput\" />\n      //           </td>\n      //         </tr>\n      //         <tr>\n      //           <th>\n      //             Added Value\n      //           </th>\n      //           <td>\n      //             <input type=\"number\" min=\"0\" className=\"table input\" id=\"totalAddedValueInput\" />\n      //           </td>\n      //         </tr>\n      //       </tbody>\n      //       <tbody>\n      //         <tr>\n      //           <th>\n      //             New Total\n      //           </th>\n      //           <td>\n      //             <output className=\"table output\" id=\"newTotalOutput\" />\n      //           </td>\n      //         </tr>\n      //       </tbody>\n      //     </table>\n      //   </div>\n      // </div>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}