{"version":3,"sources":["components/Stock.js","components/CurrentTotalAssets.js","components/AddedAssets.js","components/NewTotalAssets.js","components/Portfolio.js","components/AddStock.js","App.js","serviceWorker.js","index.js"],"names":["Stock","this","props","stock","id","symbol","name","currentPrice","quantity","targetPercentage","currentTotalAssets","delStock","getQuantity","newTotalAssets","marketValue","toFixed","currentPercentage","targetValue","addedValue","sellOrPurchase","Math","floor","ceil","costOrValue","Button","variant","type","className","onClick","bind","FormControl","min","value","onChange","max","step","handleTargetPercentageInput","Component","CurrentTotalAssets","colSpan","AddedAssets","addedAssets","handleAddedAssetsInput","NewTotalAssets","Portfolio","portfolio","length","Table","striped","bordered","hover","scope","map","key","AddStock","state","userSymbolInput","handleUserInput","e","setState","target","handleSubmit","preventDefault","addStock","replace","Form","onSubmit","InputGroup","Prepend","placeholder","required","App","newPortfolioItem","newId","Search_API_Call","fetch","then","searchResponse","json","searchData","stockToAdd","Quote_API_Call","quoteResponse","quoteData","catch","alert","currentStock","find","currentMarketValue","filter","assetsAccumulator","userQuantityInput","userPercentageInput","userAddedAssetsInput","console","log","calculateMarketValue","calculateTotalAssets","calculateCurrentPercentage","calculateTargetValue","calculateSellOrPurchase","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.e2d0d0aa.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {Button, FormControl} from 'react-bootstrap';\r\n\r\nclass Stock extends Component {\r\n   \r\n\r\n    render() {\r\n      \r\n    const {id, symbol, name, currentPrice, quantity, targetPercentage} = this.props.stock;\r\n    const {currentTotalAssets, delStock, getQuantity, newTotalAssets} = this.props\r\n\r\n    const marketValue = (currentPrice * quantity).toFixed(2);\r\n    const currentPercentage = currentTotalAssets > 0 ? ((100 * (marketValue / currentTotalAssets)).toFixed(2)) : 0;\r\n    const targetValue = newTotalAssets > 0 ? (((targetPercentage / 100) * (newTotalAssets)).toFixed(2)) : 0;\r\n    const addedValue = newTotalAssets > 0 ? ((targetValue - marketValue).toFixed(2)) : 0;\r\n    const sellOrPurchase = (addedValue > 0 ? Math.floor((addedValue) / (currentPrice)) : Math.ceil((addedValue) / (currentPrice)));\r\n    const costOrValue = ((sellOrPurchase * currentPrice).toFixed(2));\r\n      \r\n        return (\r\n            <tr>\r\n                <td>\r\n                    <Button variant=\"primary\" type=\"button\" className=\"removeStockButton\" onClick={delStock.bind(this, id)}>Remove</Button>\r\n                </td>\r\n                <td>\r\n                    {symbol}\r\n                </td>\r\n                <td>\r\n                    {name}\r\n                </td>\r\n                <td>\r\n                    <FormControl type=\"number\" min=\"0\" className=\"table input\" value={quantity} onChange={getQuantity.bind(this, id)}/>\r\n                </td>\r\n                <td>\r\n                    {currentPrice}\r\n                </td>\r\n                <td>\r\n                    {marketValue}\r\n                </td>\r\n                <td>\r\n                    {currentPercentage}\r\n                </td>\r\n                <td>\r\n                    <FormControl type=\"number\" min=\"0\" max=\"100\" className=\"input\" step=\"0.01\" id=\"targetPercentageInput\" value={targetPercentage} onChange={this.props.handleTargetPercentageInput.bind(this, id)}/>\r\n                </td>\r\n                <td>\r\n                    {targetValue}\r\n                </td>\r\n                <td>\r\n                    {addedValue}\r\n                </td>\r\n                <td>\r\n                    {sellOrPurchase}\r\n                </td>\r\n                <td>\r\n                    {costOrValue}\r\n                </td>\r\n            </tr>\r\n        )\r\n    }\r\n}\r\n\r\nStock.propTypes = {\r\n    stock: PropTypes.object.isRequired\r\n}\r\n\r\nexport default Stock;\r\n","import React, { Component } from 'react';\r\n\r\nclass CurrentTotalAssets extends Component {\r\n    \r\n    render() {\r\n        return (\r\n            <tr><th colSpan=\"2\">Current Total Assets</th><td colSpan=\"10\">{this.props.currentTotalAssets}</td></tr>  \r\n            )\r\n    };\r\n}\r\n\r\nexport default CurrentTotalAssets;","import React, { Component } from 'react';\r\nimport { FormControl } from 'react-bootstrap';\r\n\r\nclass AddedAssets extends Component {\r\n    \r\n    render() {\r\n        return (\r\n            <tr><th colSpan=\"2\">Added Assets</th><td colSpan=\"10\"><FormControl type=\"number\" min=\"0\" className=\"table input\" id=\"addedAssetsInput\" value={this.props.addedAssets} onChange={this.props.handleAddedAssetsInput.bind(this)}/></td></tr>  \r\n            )\r\n    };\r\n}\r\n\r\nexport default AddedAssets;","import React, { Component } from 'react';\r\n\r\nclass NewTotalAssets extends Component {\r\n    \r\n    render() {\r\n\r\n        return (\r\n            <tr><th colSpan=\"2\">New Total Assets</th><td colSpan=\"10\">{this.props.newTotalAssets}</td></tr>  \r\n            )\r\n    };\r\n}\r\n\r\nexport default NewTotalAssets;","import React, { Component } from 'react';\r\nimport Stock from './Stock';\r\nimport PropTypes from 'prop-types';\r\nimport { Table } from 'react-bootstrap';\r\nimport CurrentTotalAssets from './CurrentTotalAssets';\r\nimport AddedAssets from './AddedAssets';\r\nimport NewTotalAssets from './NewTotalAssets';\r\n\r\n\r\nclass Portfolio extends Component {\r\n\r\n    render() {\r\n        if (this.props.portfolio.length > 0) {\r\n        return (\r\n            <div>\r\n            <Table striped bordered hover variant=\"dark\">\r\n                         <thead><tr><th scope=\"col\"></th><th scope=\"col\">Symbol</th><th scope=\"col\">Stock Name</th><th scope=\"col\">Quantity</th><th scope=\"col\">Current Price</th><th scope=\"col\">Market Value</th><th scope=\"col\">Current Percentage</th><th scope=\"col\">Target Percentage</th><th scope=\"col\">Target Value</th><th scope=\"col\">Added Value</th><th scope=\"col\">Sell or Purchase</th><th scope=\"col\">Cost or Value</th></tr></thead>\r\n            <tbody>\r\n                {\r\n                this.props.portfolio.map((stock) => (\r\n                <Stock\r\n                    key={stock.id}\r\n                    getQuantity={this.props.getQuantity}\r\n                    delStock={this.props.delStock}\r\n                    currentTotalAssets={this.props.currentTotalAssets}\r\n                    newTotalAssets={this.props.newTotalAssets}\r\n                    stock={stock}\r\n                    handleTargetPercentageInput={this.props.handleTargetPercentageInput}\r\n                />\r\n            )) }\r\n            {/* <tfoot><tr><th>Total</th><td></td><td></td><td></td><td></td><td>{this.props.currentTotalAssets}</td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tfoot> */}\r\n            <CurrentTotalAssets currentTotalAssets={this.props.currentTotalAssets}/>\r\n            <AddedAssets addedAssets={this.props.addedAssets} handleAddedAssetsInput={this.props.handleAddedAssetsInput}/>\r\n            <NewTotalAssets newTotalAssets={this.props.newTotalAssets}/>\r\n            </tbody> \r\n            </Table>\r\n            </div>\r\n        )\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n}\r\n\r\nPortfolio.propTypes = {\r\n    portfolio: PropTypes.array.isRequired\r\n}\r\n\r\nexport default Portfolio;\r\n","import React, { Component } from 'react';\r\nimport { Button, InputGroup, Form, FormControl } from 'react-bootstrap';\r\n\r\nclass AddStock extends Component {\r\n    state = {\r\n        userSymbolInput: '',\r\n    }\r\n\r\n\r\n    handleUserInput = (e) => {\r\n        this.setState({\r\n            userSymbolInput: e.target.value\r\n        });\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.addStock(this.state.userSymbolInput.replace(\" \", \"\"));\r\n        this.setState({ userSymbolInput: '' })\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <Form className=\"addStockForm\" onSubmit={this.handleSubmit}>\r\n            <InputGroup>\r\n                <InputGroup.Prepend>\r\n                    <Button variant=\"outline-secondary\" type=\"submit\">Add Stock</Button>\r\n                </InputGroup.Prepend>\r\n                <FormControl placeholder=\"AMZN...\" required onSubmit={this.handleSubmit} type=\"text\" value={this.state.userSymbolInput} onChange={this.handleUserInput}/>\r\n            </InputGroup>\r\n            </Form>\r\n        )\r\n    };\r\n}\r\n\r\nexport default AddStock;","import React from 'react';\r\nimport Portfolio from './components/Portfolio';\r\nimport AddStock from './components/AddStock';\r\n// import AcceptUserStockSymbol from './acceptUserStockSymbol.js';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\n// import FetchStockSymbol from './fetchStockSymbol.js';\r\n\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    currentTotalAssets: 0,\r\n    portfolio: [\r\n    ], \r\n    addedAssets: 0,\r\n    newTotalAssets: 0\r\n  }\r\n\r\n  addStock = (userSymbolInput) => {\r\n    let newPortfolioItem = {};\r\n    let stockToAdd = '';\r\n    let currentPrice = '';\r\n    let stockTitle = '';\r\n    let newId = this.state.portfolio.length + 1\r\n    let API_Key = 'WTIDRPP8PEFL74TS';\r\n    let Search_API_Call = `https://www.alphavantage.co/query?function=SYMBOL_SEARCH&keywords=${userSymbolInput}&apikey=${API_Key}`;\r\n\r\n\r\n    fetch(Search_API_Call)\r\n      .then(\r\n        (searchResponse) => {\r\n          return searchResponse.json();\r\n        }\r\n      )\r\n      .then(\r\n        (searchData) => {\r\n          return stockToAdd = searchData[\"bestMatches\"][0];\r\n        }\r\n      )\r\n      .then(\r\n        (stockToAdd) => {\r\n          let Quote_API_Call = `https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=${stockToAdd[\"1. symbol\"]}&interval=5min&apikey=${API_Key}&outputsize=compact`;\r\n\r\n          fetch(Quote_API_Call)\r\n            .then(\r\n              (quoteResponse) => {\r\n                return quoteResponse.json();\r\n              }\r\n            )\r\n            .then(\r\n              (quoteData) => {\r\n                return currentPrice = +(quoteData[\"Global Quote\"][\"05. price\"]);\r\n              })\r\n            .then(\r\n              (currentPrice) => {\r\n                newPortfolioItem = {\r\n                  id: newId,\r\n                  symbol: stockToAdd[\"1. symbol\"],\r\n                  name: stockToAdd[\"2. name\"],\r\n                  currentPrice: currentPrice.toFixed(2),\r\n                  quantity: '',\r\n                  targetPercentage: '',\r\n                };\r\n                this.setState({ portfolio: [...this.state.portfolio, newPortfolioItem] });\r\n              }\r\n            ).catch(\r\n              () => alert(\"Error: Either your search term was invalid, or the request to add a stock was too frequent. Please try again.\")\r\n            )\r\n        }\r\n      )\r\n      .catch(\r\n        () => alert(\"Error: Either your search term was invalid, or the request to add a stock was too frequent. Please try again.\")\r\n      )\r\n  }\r\n\r\n  delStock = (id) => {\r\n    let currentStock = this.state.portfolio.find(portfolio => portfolio.id === id)\r\n    let currentMarketValue = (currentStock.currentPrice * currentStock.quantity).toFixed(2)\r\n    this.setState({\r\n      currentTotalAssets: this.state.currentTotalAssets - currentMarketValue,\r\n      newTotalAssets: this.state.newTotalAssets - currentMarketValue,\r\n      portfolio: this.state.portfolio.filter(stock => stock.id !== id)\r\n      })\r\n    }\r\n\r\n  getQuantity = (id, e) => {\r\n    let assetsAccumulator = 0;\r\n    let userQuantityInput = +e.target.value;\r\n    if (userQuantityInput < 0) {\r\n      userQuantityInput = 0;\r\n    }\r\n    this.setState({ currentTotalAssets: '' });\r\n    this.setState({\r\n      portfolio: this.state.portfolio.map(stock => {\r\n        if (stock.id === id) {\r\n          stock[\"quantity\"] = +userQuantityInput;\r\n        };\r\n        assetsAccumulator += (stock.currentPrice * stock.quantity);\r\n        return stock;\r\n      }), \r\n      currentTotalAssets: +assetsAccumulator.toFixed(2),\r\n      newTotalAssets: (this.state.addedAssets + assetsAccumulator).toFixed(2)\r\n    })\r\n  }\r\n\r\n  handleTargetPercentageInput = (id, e) => {\r\n    let userPercentageInput = +(e.target.value);\r\n    if (userPercentageInput > 100) {\r\n      userPercentageInput = 100\r\n    } else if (userPercentageInput < 0) {\r\n      userPercentageInput = 0\r\n    }\r\n    this.setState({\r\n      portfolio: this.state.portfolio.map(stock => {\r\n        if (stock.id === id) {\r\n          stock[\"targetPercentage\"] = userPercentageInput;\r\n        };\r\n        return stock;\r\n      })\r\n    })\r\n  }\r\n\r\n  handleAddedAssetsInput = (e) => {\r\n    let userAddedAssetsInput = +e.target.value;\r\n    if (userAddedAssetsInput < 0) {\r\n      userAddedAssetsInput = 0\r\n    }\r\n    console.log(this.state.currentTotalAssets)\r\n    console.log(userAddedAssetsInput)\r\n    this.setState({\r\n      addedAssets: userAddedAssetsInput,\r\n      newTotalAssets: +this.state.currentTotalAssets + userAddedAssetsInput\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <AddStock addStock={this.addStock} />\r\n        <Portfolio\r\n          getQuantity={this.getQuantity}\r\n          currentTotalAssets={this.state.currentTotalAssets}\r\n          addedAssets={this.state.addedAssets}\r\n          newTotalAssets={this.state.newTotalAssets}\r\n          delStock={this.delStock}\r\n          portfolio={this.state.portfolio}\r\n          calculateMarketValue={this.calculateMarketValue}\r\n          calculateTotalAssets={this.calculateTotalAssets}\r\n          calculateCurrentPercentage={this.calculateCurrentPercentage}\r\n          handleTargetPercentageInput={this.handleTargetPercentageInput}\r\n          calculateTargetValue={this.calculateTargetValue}\r\n          calculateSellOrPurchase={this.calculateSellOrPurchase}\r\n          handleAddedAssetsInput={this.handleAddedAssetsInput}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}